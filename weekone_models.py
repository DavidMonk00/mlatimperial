from sklearn.linear_model import Ridge, Lasso, ElasticNet
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import AdaBoostRegressor
from numpy import array
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler


models = {'ridge': {'model': Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
        normalize=False, random_state=None, solver='auto', tol=0.001),
  'param_grid': {'ridge__alpha': array([1.00000000e+02, 2.78255940e+02, 7.74263683e+02, 2.15443469e+03,
          5.99484250e+03, 1.66810054e+04, 4.64158883e+04, 1.29154967e+05,
          3.59381366e+05, 1.00000000e+06])},
  'best_estimator': Pipeline(memory=None,
           steps=[('standardscaler',
                   StandardScaler(copy=True, with_mean=True, with_std=True)),
                  ('ridge',
                   Ridge(alpha=46415.888336127726, copy_X=True,
                         fit_intercept=True, max_iter=None, normalize=False,
                         random_state=None, solver='auto', tol=0.001))],
           verbose=False),
  'best_score': -0.5426997451871067},
 'lasso': {'model': Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
        normalize=False, positive=False, precompute=False, random_state=None,
        selection='cyclic', tol=0.0001, warm_start=False),
  'param_grid': {'lasso__alpha': array([1.00000000e-05, 4.64158883e-05, 2.15443469e-04, 1.00000000e-03,
          4.64158883e-03, 2.15443469e-02, 1.00000000e-01, 4.64158883e-01,
          2.15443469e+00, 1.00000000e+01])},
  'best_estimator': Pipeline(memory=None,
           steps=[('standardscaler',
                   StandardScaler(copy=True, with_mean=True, with_std=True)),
                  ('lasso',
                   Lasso(alpha=4.641588833612782e-05, copy_X=True,
                         fit_intercept=True, max_iter=1000, normalize=False,
                         positive=False, precompute=False, random_state=None,
                         selection='cyclic', tol=0.0001, warm_start=False))],
           verbose=False),
  'best_score': -0.564975021601666},
 'elasticnet': {'model': ElasticNet(alpha=1.0, copy_X=True, fit_intercept=True, l1_ratio=0.5,
             max_iter=1000, normalize=False, positive=False, precompute=False,
             random_state=None, selection='cyclic', tol=0.0001, warm_start=False),
  'param_grid': {'elasticnet__alpha': array([1.00000000e-05, 4.64158883e-05, 2.15443469e-04, 1.00000000e-03,
          4.64158883e-03, 2.15443469e-02, 1.00000000e-01, 4.64158883e-01,
          2.15443469e+00, 1.00000000e+01])},
  'best_estimator': Pipeline(memory=None,
           steps=[('standardscaler',
                   StandardScaler(copy=True, with_mean=True, with_std=True)),
                  ('elasticnet',
                   ElasticNet(alpha=4.641588833612782e-05, copy_X=True,
                              fit_intercept=True, l1_ratio=0.5, max_iter=1000,
                              normalize=False, positive=False, precompute=False,
                              random_state=None, selection='cyclic', tol=0.0001,
                              warm_start=False))],
           verbose=False),
  'best_score': -0.5649830495941688},
 'decisiontreeregressor': {'model': DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=None,
                        max_features=None, max_leaf_nodes=None,
                        min_impurity_decrease=0.0, min_impurity_split=None,
                        min_samples_leaf=1, min_samples_split=2,
                        min_weight_fraction_leaf=0.0, presort='deprecated',
                        random_state=None, splitter='best'),
  'param_grid': {'decisiontreeregressor__max_depth': array([ 1,  1,  1,  2,  3,  5,  7, 10, 14, 19]),
   'decisiontreeregressor__min_samples_leaf': array([ 100,  177,  316,  562, 1000])},
  'best_estimator': Pipeline(memory=None,
           steps=[('standardscaler',
                   StandardScaler(copy=True, with_mean=True, with_std=True)),
                  ('decisiontreeregressor',
                   DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse',
                                         max_depth=7, max_features=None,
                                         max_leaf_nodes=None,
                                         min_impurity_decrease=0.0,
                                         min_impurity_split=None,
                                         min_samples_leaf=100,
                                         min_samples_split=2,
                                         min_weight_fraction_leaf=0.0,
                                         presort='deprecated', random_state=None,
                                         splitter='best'))],
           verbose=False),
  'best_score': -0.48952135424984833},
 'adaboostregressor': {'model': AdaBoostRegressor(base_estimator=DecisionTreeRegressor(ccp_alpha=0.0,
                                                         criterion='mse',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_impurity_split=None,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         presort='deprecated',
                                                         random_state=None,
                                                         splitter='best'),
                    learning_rate=1.0, loss='linear', n_estimators=50,
                    random_state=None),
  'param_grid': {'adaboostregressor__n_estimators': array([   1,    2,    4,   10,   21,   46,  100,  215,  464, 1000])},
  'best_estimator': Pipeline(memory=None,
           steps=[('standardscaler',
                   StandardScaler(copy=True, with_mean=True, with_std=True)),
                  ('adaboostregressor',
                   AdaBoostRegressor(base_estimator=DecisionTreeRegressor(ccp_alpha=0.0,
                                                                          criterion='mse',
                                                                          max_depth=3,
                                                                          max_features=None,
                                                                          max_leaf_nodes=None,
                                                                          min_impurity_decrease=0.0,
                                                                          min_impurity_split=None,
                                                                          min_samples_leaf=1,
                                                                          min_samples_split=2,
                                                                          min_weight_fraction_leaf=0.0,
                                                                          presort='deprecated',
                                                                          random_state=None,
                                                                          splitter='best'),
                                     learning_rate=1.0, loss='linear',
                                     n_estimators=2, random_state=None))],
           verbose=False),
  'best_score': -0.5081202139034571}}
